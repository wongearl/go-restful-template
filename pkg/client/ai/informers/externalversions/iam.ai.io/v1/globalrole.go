// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	iamaiiov1 "github.com/wongearl/go-restful-template/pkg/api/iam.ai.io/v1"
	versioned "github.com/wongearl/go-restful-template/pkg/client/ai/clientset/versioned"
	internalinterfaces "github.com/wongearl/go-restful-template/pkg/client/ai/informers/externalversions/internalinterfaces"
	v1 "github.com/wongearl/go-restful-template/pkg/client/ai/listers/iam.ai.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// GlobalRoleInformer provides access to a shared informer and lister for
// GlobalRoles.
type GlobalRoleInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.GlobalRoleLister
}

type globalRoleInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewGlobalRoleInformer constructs a new informer for GlobalRole type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewGlobalRoleInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredGlobalRoleInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredGlobalRoleInformer constructs a new informer for GlobalRole type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredGlobalRoleInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IamV1().GlobalRoles().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.IamV1().GlobalRoles().Watch(context.TODO(), options)
			},
		},
		&iamaiiov1.GlobalRole{},
		resyncPeriod,
		indexers,
	)
}

func (f *globalRoleInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredGlobalRoleInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *globalRoleInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&iamaiiov1.GlobalRole{}, f.defaultInformer)
}

func (f *globalRoleInformer) Lister() v1.GlobalRoleLister {
	return v1.NewGlobalRoleLister(f.Informer().GetIndexer())
}
