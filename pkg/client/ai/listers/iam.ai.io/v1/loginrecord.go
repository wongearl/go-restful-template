// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/wongearl/go-restful-template/pkg/api/iam.ai.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoginRecordLister helps list LoginRecords.
// All objects returned here must be treated as read-only.
type LoginRecordLister interface {
	// List lists all LoginRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LoginRecord, err error)
	// Get retrieves the LoginRecord from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.LoginRecord, error)
	LoginRecordListerExpansion
}

// loginRecordLister implements the LoginRecordLister interface.
type loginRecordLister struct {
	indexer cache.Indexer
}

// NewLoginRecordLister returns a new LoginRecordLister.
func NewLoginRecordLister(indexer cache.Indexer) LoginRecordLister {
	return &loginRecordLister{indexer: indexer}
}

// List lists all LoginRecords in the indexer.
func (s *loginRecordLister) List(selector labels.Selector) (ret []*v1.LoginRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LoginRecord))
	})
	return ret, err
}

// Get retrieves the LoginRecord from the index for a given name.
func (s *loginRecordLister) Get(name string) (*v1.LoginRecord, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("loginrecord"), name)
	}
	return obj.(*v1.LoginRecord), nil
}
