// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/wongearl/go-restful-template/pkg/api/iam.ai.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeLoginRecords implements LoginRecordInterface
type FakeLoginRecords struct {
	Fake *FakeIamV1
}

var loginrecordsResource = v1.SchemeGroupVersion.WithResource("loginrecords")

var loginrecordsKind = v1.SchemeGroupVersion.WithKind("LoginRecord")

// Get takes name of the loginRecord, and returns the corresponding loginRecord object, and an error if there is any.
func (c *FakeLoginRecords) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.LoginRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(loginrecordsResource, name), &v1.LoginRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LoginRecord), err
}

// List takes label and field selectors, and returns the list of LoginRecords that match those selectors.
func (c *FakeLoginRecords) List(ctx context.Context, opts metav1.ListOptions) (result *v1.LoginRecordList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(loginrecordsResource, loginrecordsKind, opts), &v1.LoginRecordList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.LoginRecordList{ListMeta: obj.(*v1.LoginRecordList).ListMeta}
	for _, item := range obj.(*v1.LoginRecordList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested loginRecords.
func (c *FakeLoginRecords) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(loginrecordsResource, opts))
}

// Create takes the representation of a loginRecord and creates it.  Returns the server's representation of the loginRecord, and an error, if there is any.
func (c *FakeLoginRecords) Create(ctx context.Context, loginRecord *v1.LoginRecord, opts metav1.CreateOptions) (result *v1.LoginRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(loginrecordsResource, loginRecord), &v1.LoginRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LoginRecord), err
}

// Update takes the representation of a loginRecord and updates it. Returns the server's representation of the loginRecord, and an error, if there is any.
func (c *FakeLoginRecords) Update(ctx context.Context, loginRecord *v1.LoginRecord, opts metav1.UpdateOptions) (result *v1.LoginRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(loginrecordsResource, loginRecord), &v1.LoginRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LoginRecord), err
}

// Delete takes name of the loginRecord and deletes it. Returns an error if one occurs.
func (c *FakeLoginRecords) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(loginrecordsResource, name, opts), &v1.LoginRecord{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeLoginRecords) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(loginrecordsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1.LoginRecordList{})
	return err
}

// Patch applies the patch and returns the patched loginRecord.
func (c *FakeLoginRecords) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.LoginRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(loginrecordsResource, name, pt, data, subresources...), &v1.LoginRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.LoginRecord), err
}
