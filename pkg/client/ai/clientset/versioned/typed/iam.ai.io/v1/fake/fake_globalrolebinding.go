// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/wongearl/go-restful-template/pkg/api/iam.ai.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeGlobalRoleBindings implements GlobalRoleBindingInterface
type FakeGlobalRoleBindings struct {
	Fake *FakeIamV1
}

var globalrolebindingsResource = v1.SchemeGroupVersion.WithResource("globalrolebindings")

var globalrolebindingsKind = v1.SchemeGroupVersion.WithKind("GlobalRoleBinding")

// Get takes name of the globalRoleBinding, and returns the corresponding globalRoleBinding object, and an error if there is any.
func (c *FakeGlobalRoleBindings) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.GlobalRoleBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(globalrolebindingsResource, name), &v1.GlobalRoleBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GlobalRoleBinding), err
}

// List takes label and field selectors, and returns the list of GlobalRoleBindings that match those selectors.
func (c *FakeGlobalRoleBindings) List(ctx context.Context, opts metav1.ListOptions) (result *v1.GlobalRoleBindingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(globalrolebindingsResource, globalrolebindingsKind, opts), &v1.GlobalRoleBindingList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.GlobalRoleBindingList{ListMeta: obj.(*v1.GlobalRoleBindingList).ListMeta}
	for _, item := range obj.(*v1.GlobalRoleBindingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested globalRoleBindings.
func (c *FakeGlobalRoleBindings) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(globalrolebindingsResource, opts))
}

// Create takes the representation of a globalRoleBinding and creates it.  Returns the server's representation of the globalRoleBinding, and an error, if there is any.
func (c *FakeGlobalRoleBindings) Create(ctx context.Context, globalRoleBinding *v1.GlobalRoleBinding, opts metav1.CreateOptions) (result *v1.GlobalRoleBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(globalrolebindingsResource, globalRoleBinding), &v1.GlobalRoleBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GlobalRoleBinding), err
}

// Update takes the representation of a globalRoleBinding and updates it. Returns the server's representation of the globalRoleBinding, and an error, if there is any.
func (c *FakeGlobalRoleBindings) Update(ctx context.Context, globalRoleBinding *v1.GlobalRoleBinding, opts metav1.UpdateOptions) (result *v1.GlobalRoleBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(globalrolebindingsResource, globalRoleBinding), &v1.GlobalRoleBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GlobalRoleBinding), err
}

// Delete takes name of the globalRoleBinding and deletes it. Returns an error if one occurs.
func (c *FakeGlobalRoleBindings) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(globalrolebindingsResource, name, opts), &v1.GlobalRoleBinding{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeGlobalRoleBindings) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(globalrolebindingsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1.GlobalRoleBindingList{})
	return err
}

// Patch applies the patch and returns the patched globalRoleBinding.
func (c *FakeGlobalRoleBindings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.GlobalRoleBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(globalrolebindingsResource, name, pt, data, subresources...), &v1.GlobalRoleBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.GlobalRoleBinding), err
}
