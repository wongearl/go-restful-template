// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/wongearl/go-restful-template/pkg/api/core.ai.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeHealths implements HealthInterface
type FakeHealths struct {
	Fake *FakeCoreV1
}

var healthsResource = v1.SchemeGroupVersion.WithResource("healths")

var healthsKind = v1.SchemeGroupVersion.WithKind("Health")

// Get takes name of the health, and returns the corresponding health object, and an error if there is any.
func (c *FakeHealths) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Health, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(healthsResource, name), &v1.Health{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Health), err
}

// List takes label and field selectors, and returns the list of Healths that match those selectors.
func (c *FakeHealths) List(ctx context.Context, opts metav1.ListOptions) (result *v1.HealthList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(healthsResource, healthsKind, opts), &v1.HealthList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.HealthList{ListMeta: obj.(*v1.HealthList).ListMeta}
	for _, item := range obj.(*v1.HealthList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested healths.
func (c *FakeHealths) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(healthsResource, opts))
}

// Create takes the representation of a health and creates it.  Returns the server's representation of the health, and an error, if there is any.
func (c *FakeHealths) Create(ctx context.Context, health *v1.Health, opts metav1.CreateOptions) (result *v1.Health, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(healthsResource, health), &v1.Health{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Health), err
}

// Update takes the representation of a health and updates it. Returns the server's representation of the health, and an error, if there is any.
func (c *FakeHealths) Update(ctx context.Context, health *v1.Health, opts metav1.UpdateOptions) (result *v1.Health, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(healthsResource, health), &v1.Health{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Health), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeHealths) UpdateStatus(ctx context.Context, health *v1.Health, opts metav1.UpdateOptions) (*v1.Health, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(healthsResource, "status", health), &v1.Health{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Health), err
}

// Delete takes name of the health and deletes it. Returns an error if one occurs.
func (c *FakeHealths) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(healthsResource, name, opts), &v1.Health{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeHealths) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(healthsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1.HealthList{})
	return err
}

// Patch applies the patch and returns the patched health.
func (c *FakeHealths) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Health, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(healthsResource, name, pt, data, subresources...), &v1.Health{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Health), err
}
